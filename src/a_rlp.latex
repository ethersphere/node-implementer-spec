\section{RLP in Swarm protocols} \label{rlp}

Swarm protocols require a p2p transport protocol.

At the time of writing, the Swarm reference implementation depends on the devp2p protocol, including its RLPX wire format and encryption scheme. \cite{ETHWIKI:RLP}  Detailing the concepts of \texttt{devp2p} and \texttt{RLP(X)} as such is out of scope of this document.

Data payloads will be defined in ABNF format. Reference examples to verify the correct \texttt{RLP} encoded form of the data will also be included. \todo{appendix and refs to devp2p implementations}

We define the following mappings from ABNF data type definitions to RLP data types:

\begin{description}
\item [BOOL] is encoded as an RLP encoded integer with length of one byte
\item [OCTET] is encoded as an RLP encoded integer with length of one byte
\item [TIMESTAMP] is encoded as an RLP encoded variable length integer
\item [\%x\#\#] hexadecimal literals are encoded as encoded integers with length of one byte, corresponding to its hexadecimal (not its string) value
\item [LIST] as defined in \ref{abnf-list-definition} will be RLP encoded as RLP lists.
\end{description}

All other data is encoded as RLP lists.

The outermost element of a serialization is always a LIST item \footnote{This is due to the fact that the reference implementation is written in golang, and the default RLP deserialization of golang structs treats the struct itself as a list.}

\subsection{example}

A message structure with only one field of \texttt{3OCTET} data will in \emph{reality} be \texttt{LIST(3OCTET)}. If  the data is \texttt{0x666f6f} it will serialize to \texttt{0xc4 83 66 6f 6f}, which breaks down to:

\begin{lstlisting}[numbers=none]
LIST:	0xc4 (list, 4 bytes long)
3OCTET:	0x83 (string, 3 bytes long)
data: 	0x66 0x6f 0x6f
\end{lstlisting}

\subsection{bzz}

\subsubsection{handshake}

Consider a handshake message with the following arbitary values:

\begin{lstlisting}[numbers=none]
Version               42
Network ID            622
Address Data.OVERLAYADDRESS	134c2fdea53719022366b383bae4ae2e23f74d734a4f40170970b2910da851ee
Address Data.UNDERLAYADDRES 	enode://0459783d8f54b3e684d2a6928e4d94a0c32570eb14fbecac9d07955c0a91eb3b5edce5ef23cff94250fb5591456d2d3f576315db146421d5e885675978fa59dff5
Lightnode             1
\end{lstlisting}

The RLP encoding of this message will be:

\begin{lstlisting}[numbers=none]
00000000  f8 b4 2a 82 02 6e f8 ad  a0 13 4c 2f de a5 37 19  |..*..n....L/..7.|
00000010  02 23 66 b3 83 ba e4 ae  2e 23 f7 4d 73 4a 4f 40  |.#f......#.MsJO@|
00000020  17 09 70 b2 91 0d a8 51  ee b8 8a 65 6e 6f 64 65  |..p....Q...enode|
00000030  3a 2f 2f 30 34 35 39 37  38 33 64 38 66 35 34 62  |://0459783d8f54b|
00000040  33 65 36 38 34 64 32 61  36 39 32 38 65 34 64 39  |3e684d2a6928e4d9|
00000050  34 61 30 63 33 32 35 37  30 65 62 31 34 66 62 65  |4a0c32570eb14fbe|
00000060  63 61 63 39 64 30 37 39  35 35 63 30 61 39 31 65  |cac9d07955c0a91e|
00000070  62 33 62 35 65 64 63 65  35 65 66 32 33 63 66 66  |b3b5edce5ef23cff|
00000080  39 34 32 35 30 66 62 35  35 39 31 34 35 36 64 32  |94250fb5591456d2|
00000090  64 33 66 35 37 36 33 31  35 64 62 31 34 36 34 32  |d3f576315db14642|
000000a0  31 64 35 65 38 38 35 36  37 35 39 37 38 66 61 35  |1d5e885675978fa5|
000000b0  39 64 66 66 35 01                                 |9dff5.|
000000b6
\end{lstlisting}

\subsection{pss}

\subsubsection{message} \label{rlp-pss-message}

Because the details of the \texttt{Whisper} implementation is out of scope of this document, we will limit ourselves to describing the message \texttt{RLP} serialization using the \emph{Raw sending mode}.

Consider a \texttt{pss} message with the following arbitary values:

\begin{lstlisting}[numbers=none]
Pss message:
to		0xabcd 		// A 2-byte partial address
control		0x02		// Raw sending mode
expire		1561373650
payload		Envelope	// see below

Envelope:
expiry		0		// unused
ttl		0		// unused
topic		0x0000026e
payload		0x666f6f	
nonce		0		// unused
\end{lstlisting}

The RLP encoding of this message will be:

\begin{lstlisting}[numbers=none]
00000000  d6 82 ab cd 02 84 5d 10  ab d2 cc 80 80 84 00 00  |......].........|
00000010  02 6e 83 66 6f 6f 80                              |.n.foo.|
00000017
\end{lstlisting}

\subsubsection{digest} \label{rlp-pss-digest}

The \texttt{RLP} serialized data for calculating the of the message in \ref{pss-message-example} would be:

\begin{lstlisting}[numbers=none]
00000000  d0 82 ab cd cc 80 80 84  00 00 02 6e 83 66 6f 6f  |...........n.foo|
00000010  80                                                |.|
00000011
\end{lstlisting}

The resulting digest:

\begin{lstlisting}[numbers=none]
00000000  7e 42 00 03 02 db be 05  ec 83 12 3c 4d 59 ea 4a  |~B.........<MY.J|
00000010  92 ff 01 44 60 38 64 dd  6f 06 b8 67 9d 81 72 98  |...D`8d.o..g..r.|
00000020
\end{lstlisting}
