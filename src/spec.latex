\documentclass[a4paper]{article}
\usepackage{fullpage}
\usepackage[colorinlistoftodos,prependcaption,textsize=tiny]{todonotes}
\usepackage{listings}
\usepackage[T1]{fontenc}
\lstset{
	basicstyle=\footnotesize,
	numbers=left,
	numberstyle=\tiny,
	showstringspaces=false,
	keywordstyle=\color{Purple},
	stringstyle=\color{ForestGreen},
	commentstyle=\color{Gray},
}
\date{\today\\ v0.2}

\author{lash}
\title{Swarm node implementer's specification}
\begin{document}

\maketitle

\section{introduction}

\subsection{data representations}

This document uses the \texttt{ABNF} convention for defining data types, as described in the IETF RFC 5234. \cite{IETF:ABNF}

\subsubsection{primitives}

The basic identifiers are defined as follows:

\begin{lstlisting}[numbers=none]
UINT64MAX	= 18446744073709551615
UINT32MAX	= 4294967295
UINT16MAX	= 65535
UINT8MAX	= 255
UINT64		= %d0-UINT64MAX
UINT32		= %d0-UINT32MAX
UINT16		= %d0-UINT16MAX
UINT8		= %d0-UINT8MAX

BOOL		= BIT

TIMESTAMP	= UINT32
\end{lstlisting}

\subsubsection{network specific types}

\todo{add IP FQDN PORT from external rfcs}

\subsubsection{rule extension for list definitions} \label{abnf-list-definition}

The construct \texttt{LIST} explicitly defines a list of elements. Elements may be of any type, and are separated by spaces. This identifier has implications for the RLP encoding of the data, as described in \ref{protocols}.

\section {fundamentals}

\input{address.latex}

\section{protocols} \label{protocols}

Swarm protocols require a p2p transport protocol.

At the time of writing, the Swarm reference implementation depends on the devp2p protocol, including its RLPX wire format and encryption scheme. \cite{ETHWIKI:RLP}  Detailing the concepts of \texttt{devp2p} and \texttt{RLP(X)} as such is out of scope of this document.

Data payloads will be defined in ABNF format. Reference examples to verify the correct \texttt{RLP} encoded form of the data will also be included. \todo{appendix and refs to devp2p implementations}

We define the following mappings from ABNF data type definitions to RLP data types:

\begin{description}
\item [BOOL] is encoded as an RLP encoded integer with length of one byte
\item [OCTET] is encoded as an RLP encoded integer with length of one byte
\item [TIMESTAMP] is encoded as an RLP encoded variable length integer
\item [\%x\#\#] hexadecimal literals are encoded as encoded integers with length of one byte, corresponding to its hexadecimal (not its string) value
\item [LIST] as defined in \ref{abnf-list-definition} will be RLP encoded as RLP lists.
\end{description}

All other data is encoded as RLP lists.

The outermost element of a serialization is always a LIST item \footnote{This is due to the fact that the reference implementation is written in golang, and the default RLP deserialization of golang structs treats the struct itself as a list.}

\subsection{example}

A message structure with only one field of \texttt{3OCTET} data will in \emph{reality} be \texttt{LIST(3OCTET)}. If  the data is \texttt{0x666f6f} it will serialize to \texttt{0xc4 83 66 6f 6f}, which breaks down to:

\begin{lstlisting}[numbers=none]
LIST:	0xc4 (list, 4 bytes long)
3OCTET:	0x83 (string, 3 bytes long)
data: 	0x66 0x6f 0x6f
\end{lstlisting}

\input{proto_bzz.latex}

\input{proto_pss.latex}

\newpage

\bibliography{spec}
\bibliographystyle{plain}

\end{document}
