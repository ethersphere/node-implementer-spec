\section{pss}

The \texttt{pss} protocol consists of a single message type. The message type provides optional builtin encryption alternatives. It also contains information about how it should be routed in the Swarm network, and a topic which determines how the receiver should process the message's content.

For the moment, \texttt{pss} uses \texttt{Whisper} for builtin encryption. \cite{ETHWIKI:WHISPER} \emph{this may change in the future}. For this reason, it is advisable that any \texttt{Whisper}-related parts of your \texttt{pss} implementation are fully compartmentalized, so they can be replaced as easily as possible.

\subsection{message structure}

The message type is structured as follows:

\begin{lstlisting}[numbers=none]
To		PssAddress
Control		byte
Expire		uint32
Payload		Envelope
\end{lstlisting}

The \texttt{PssAddress} is a Swarm Overlay Address. The address may be specified:

\begin{itemize}
\item Full, $32$ bytes
\item Partial, with $n$ least significant bytes removed
\item Empty, $0$ bytes
\end{itemize}

The \texttt{Control} byte is a bit field that allows the sender to specify certain conditions for the processing of the message. These are currently:

\begin{lstlisting}[numbers=none]
Symmetric	0x01 // the message uses builtin symmetric encryption
Raw		0x02 // the message does not use builtin encryption
\end{lstlisting}

The \texttt{Expire} field is a 32 byte \texttt{Unix Timestamp}. Messages encountered later than the time represented by this timestamp \emph{MUST NOT} be routed or processed.

The \texttt{Envelope} field is a \emph{Whisper Envelope} structure. See below.

\subsubsection{Whisper Envelope} 

It is out of scope of this document to discuss implementation details of Whisper. However, the \texttt{RLP} serialization of a \texttt{pss} message also includes the serialization of the \texttt{Whisper} envelope. Therefore, we include an informal description of the \texttt{RLP} serialization of the \texttt{Whisper} envelope here for convenience.

The envelope contains the following fields.

\begin{lstlisting}[numbers=none]
Expiry	uint32		// ignored
TTL	uint32		// ignored
Topic	Topic		// 4 bytes
Data	bytes		// arbitrary bytes
Nonce	uint64		// ignored
\end{lstlisting}

The fields marked as \texttt{ignored} are not used by \texttt{pss}. But they are still part of the \texttt{RLP} serialization of the envelope. If builtin encryption is being used, they may contain values inserted by Whisper as it encrypts the envelope. \footnote{In the \texttt{geth} implementation of \texttt{Whisper} it is not possible to encrypt a message \emph{without} performing any \emph{Proof-of-Work}. \texttt{pss} sets the \texttt{PoW} parameter to $10^{-10}$, which effectively reduces the amount of work done to zero. On decryption, \emph{pss} \emph{ignores} the \texttt{PoW} value on the \texttt{Whisper} envelope.}

\texttt{Topic} is used to determine whether or not the message is relevant for a receiver, and which code the receiver should used to process the message. \footnote{Note that the \texttt{Topic} is \emph{not} used for the same purpose in \texttt{pss} as it is in Whisper.}

\texttt{Data} contains the actual message Payload.

\subsubsection{Raw sending mode}

If the \texttt{Raw} control bit is set, builtin encryption is not used. 

In this case, the \texttt{Data} field in the envelope simply consists of the literal byte data of the message payload.

No \texttt{Whisper} functions are executed on the envelope. 

\subsubsection{Example}

Because the details of the \texttt{Whisper} implementation is out of scope of this document, we will limit ourselves to describing the message \texttt{RLP} serialization using the \emph{Raw sending mode}.

Consider a \texttt{pss} message with the following arbitary values:

\begin{lstlisting}[numbers=none]
Pss message:
To		0xabcd 		// A 2-byte partial address
Control		0x02		// Raw sending mode
Expire		1561373650
Payload		Envelope	// see below

Envelope:
Expiry		0		// unused
TTL		0		// unused
Topic		0x0000026e
Payload		0x666f6f	
Nonce		0
\end{lstlisting}

The RLP encoding of this message will be:

\begin{lstlisting}[numbers=none]
00000000  d6 82 ab cd 02 84 5d 10  ab d2 cc 80 80 84 00 00  |......].........|
00000010  02 6e 83 66 6f 6f 80                              |.n.foo.|
00000017
\end{lstlisting}

\subsection{Message handling}

Whether or not a node should process a message, and how it should process it, depends on several factors.

\begin{itemize}
\item parameters in the message
\item \texttt{pss} node configurations
\end{itemize}

This decision algorithm consists of the following sequential steps:

\subsubsection{Addressing}

The receiving node's Swarm Overlay Address \emph{MUST} match the \texttt{To} field of the \texttt{pss} message.

In case the \texttt{To} field is a \emph{partial} address, the partial address \emph{MUST} match the corresponding part of the node's address.

If the \texttt{To} address is an \emph{empty} address, the address automatically matches.

\subsubsection{Topic}

A \texttt{pss} node \emph{MUST} choose which code to execute based on the message's \texttt{Topic}.

We can think of a \texttt{Topic} as an identifier of a particular \emph{application} interfacing with the node. The application subscribes to contents of messages received by the node that have that certain \texttt{Topic}.

If a \texttt{pss} node has no actions registered to the topic of the message, the message \emph{MUST NOT} be processed.

\subsubsection{Encryption}

Handler code for a \texttt{Topic} \emph{MAY OR MAY NOT} allow messages sent without built-in encryption.

If only built-in encryption is allowed, \emph{whether} and \emph{how} to handle the message \emph{MUST} depend on:

\begin{itemize}
\item Is the message encrypted using symmetric encryption or public key encryption?
\item Does the node have the necessary key to decrypt the message.
\end{itemize}

Handling code \emph{SHOULD} only be registered for one single type of encryption scheme.

For example, if handler code is registered to messages encrypted with symmetric key $S_1$ and \emph{Topic} $T$, and the node receives a message with topic $T$ encrypted with public key $P_1pub$, and the node knows the private key $P_1priv$, the message \emph{SHOULD NOT} be processed.


