\section{pss}

The \texttt{pss} protocol consists of a single message type. The message type provides optional builtin encryption alternatives. It also contains information about how it should be routed in the Swarm network, and a topic which determines how the receiver should process the message's content.

For the moment, \texttt{pss} uses \texttt{Whisper} for builtin encryption. \cite{ETHWIKI:WHISPER} \emph{this may change in the future}. For this reason, it is advisable that any \texttt{Whisper}-related parts of your \texttt{pss} implementation are fully compartmentalized, so they can be replaced with as little effort and impact on the implementation as possible.

\subsection{data components}

The message type is composed of the following elements:

\subsubsection{Address}

An arbirary fragment of a Swarm Overlay Address:

\begin{lstlisting}[numbers=none]
PSSADDRESS	= 0*32OCTET
\end{lstlisting}

\subsubsection{Control flag}

The \texttt{Control} byte is a bit field that allows the sender to specify certain conditions for the processing of the message. These are currently:

\begin{lstlisting}[numbers=none]
PSSCONTROLSYMMETRIC	= %x01 // the message uses builtin symmetric encryption
PSSCONTROLRAW		= %x02 // the message does not use builtin encryption
PSSFLAG			= PSSCONTROLSYMMETRIC / PSSCONTROLRAW
\end{lstlisting}

If the \texttt{Raw} control bit is set, builtin encryption is not used. 

\subsubsection{Whisper Envelope} 

It is out of scope of this document to discuss implementation details of Whisper. However, the \texttt{RLP} serialization of a \texttt{pss} message also includes the serialization of the \texttt{Whisper} envelope. Therefore, we include a description of the \texttt{RLP} serialization of the \texttt{Whisper} envelope, as it relates to the serialization of the \texttt{pss} message.

\begin{lstlisting}[numbers=none]
expiry		= TIMESTAMP	// ignored
ttl		= UINT32	// ignored
topic		= 4OCTET
data		= *OCTET
nonce		= UINT64	// ignored

PSSENVELOPE	= LIST(expiry ttl topic data nonce)
\end{lstlisting}

The fields marked as \texttt{ignored} are not used by \texttt{pss}. But they are still part of the \texttt{RLP} serialization of the envelope. If builtin encryption is being used, they may contain values inserted by Whisper as it encrypts the envelope.\footnote{In the \texttt{geth} implementation of \texttt{Whisper} it is not possible to encrypt a message \emph{without} performing any \emph{Proof-of-Work}. \texttt{pss} sets the \texttt{PoW} parameter to $10^{-10}$, which effectively reduces the amount of work done to zero. On decryption, \emph{pss} \emph{ignores} the \texttt{PoW} value derived from the \texttt{Whisper} envelope.}

\texttt{Topic} is used to determine whether or not the message is relevant for a receiver, and which code the receiver should used to process the message.\footnote{Note that the \texttt{Topic} is \emph{not} used for the same purpose in \texttt{pss} as it is in Whisper.}

\texttt{Data} contains the actual message Payload.

\subsection{Pss message}

Finally we can assemble the actual wire format that encapsulates a single \texttt{pss} message:

\begin{lstlisting}[numbers=none]
to		= PSSADDRESS
control		= PSSFLAG
expire		= TIMESTAMP
payload		= PSSENVELOPE

PSSMESSAGE	= LIST(to control expire payload)
\end{lstlisting}

The \texttt{expire} Messages encountered later than the time represented by the value of \texttt{expire} \emph{MUST NOT} be routed or processed.

In this case, the \texttt{Data} field in the envelope simply consists of the literal byte data of the message payload.

No \texttt{Whisper} functions are executed on the envelope. 

\subsubsection{Example} \label{pss-message-example}

Because the details of the \texttt{Whisper} implementation is out of scope of this document, we will limit ourselves to describing the message \texttt{RLP} serialization using the \emph{Raw sending mode}.

Consider a \texttt{pss} message with the following arbitary values:

\begin{lstlisting}[numbers=none]
Pss message:
to		0xabcd 		// A 2-byte partial address
control		0x02		// Raw sending mode
expire		1561373650
payload		Envelope	// see below

Envelope:
expiry		0		// unused
ttl		0		// unused
topic		0x0000026e
payload		0x666f6f	
nonce		0		// unused
\end{lstlisting}

The RLP encoding of this message will be:

\begin{lstlisting}[numbers=none]
00000000  d6 82 ab cd 02 84 5d 10  ab d2 cc 80 80 84 00 00  |......].........|
00000010  02 6e 83 66 6f 6f 80                              |.n.foo.|
00000017
\end{lstlisting}

\subsection{Message handling}

A \emph{receiver} of a message is any node whose address matchs the address of the message, and who is able to decipher the contents.

Whether or not a node should process a message, and \emph{how} it should process it, depends on several factors:

\begin{itemize}
\item parameters in the message
\item \texttt{pss} node configurations
\end{itemize}

This decision algorithm consists of the following sequential steps:

\subsubsection{Addressing}

The receiving node's Swarm Overlay Address \emph{MUST} match the \texttt{To} field of the \texttt{pss} message.

In case the \texttt{To} field is a \emph{partial} address, the partial address \emph{MUST} match the corresponding part of the node's address.

If the \texttt{To} address is an \emph{empty} address, the address automatically matches.

\subsubsection{Topic}

A \texttt{pss} node \emph{MUST} choose which code to execute based on the message's \texttt{Topic}.

We can think of a \texttt{Topic} as an identifier of a particular \emph{application} interfacing with the node. The application subscribes to contents of messages received by the node that have that certain \texttt{Topic}.

If a \texttt{pss} node has no actions registered to the topic of the message, the message \emph{MUST NOT} be processed.

\subsubsection{Encryption}

Handler code for a \texttt{Topic} \emph{MAY OR MAY NOT} allow messages sent without built-in encryption.

If only built-in encryption is allowed, \emph{whether} and \emph{how} to handle the message \emph{MUST} depend on:

\begin{itemize}
\item Whether the message encrypted using symmetric encryption or public key encryption.
\item Whether the node can successfully decrypt the message.
\end{itemize}

Handling code \emph{SHOULD} only be registered for one single encryption scheme.

For example, if handler code is registered to messages encrypted with symmetric key $S_1$ and \emph{Topic} $T$, and the node receives a message with topic $T$ encrypted with public key $P_1pub$, and the node knows the private key $P_1priv$, the message \emph{SHOULD NOT} be processed.

\subsection{Forwarding}

The rules for message forwarding apply to \emph{all} nodes on the message route. In this document we refer to these nodes \emph{relaying nodes}. This includes the \emph{sender} and any \emph{receiver} nodes.

A node \emph{MUST} always forward a message\footnote{This is done to make it more difficult to determine the true recipient of a message by traffic analysis}, \emph{unless} one of these criteria are fulfilled:

\begin{enumerate}
\item the address in the \texttt{To}-field of the message is a full 32-byte address, \emph{and} matches fully with the node's Swarm Overlay Address\footnote{In this case the recipient is already fully revealed to anyone observing the traffic}.
\item the message has been seen already, before a certain period of time has elapsed, currently defined as $10$ seconds. (see \ref{sec:message-digest})
\item the kademlia of the node can be considered as healthy
\end{enumerate}

\texttt{pss} uses the same kademlia table for routing decisions that the Swarm node uses for content routing. \cite[p. 2]{SWARMNETWORK}

Messages \emph{MUST} only be forwarded to nodes that are running a matching version of \texttt{pss}.

\subsubsection{Routing with full address} \label{sec:routing-with-full-address}

By full address we mean that the \texttt{To}-field on the \texttt{pss} message contains the full 32 bytes of the intended recipient node.

\begin{enumerate}
\item If the message address falls within the \emph{most proximate bin} of the node, the message should be forwarded to \emph{all} the node's \emph{nearest neighbors}.
\item Otherwise the node \emph{MUST} attempt to send to exactly \emph{one} peer in the bin that is the closest match to the message.
\item If this is not successful, the node \emph{MUST} try to forward to each remaining peer in that bin in order from closest to farthest until one is successful.
\item If this is not successful, the node should keep the message and retry later.
\end{enumerate}

\subsubsection{Routing with partial address}

\begin{enumerate}
\item Identify the \emph{farthest} peer that matches the partial address.
\item If that peer is in the \emph{most proximate bin}, the message should be forwarded to \emph{all} the node's \emph{nearest neighbors}.
\item Otherwise, if the bitlength of the message address equals the proximity order of its matching bin, the message should be forwarded to \emph{all} peers that are in the matching bin or closer\footnote{Notice that in this context, the matching bin becomes the \emph{most proximate bin}}.
\item Otherwise the bitlength of the message is \emph{longer} than the promixity order of its matching bin. Then the node \emph{MUST} attempt to send to exactly \emph{one} peer in the bin that is the closest match to the message.
\item If this is not successful, the node \emph{MUST} try to forward to each remaining peer in that bin in order from closest to farthest until one is successful.
\item If this is not successful, the node should keep the message and retry later.
\end{enumerate}

\subsubsection{Routing with empty address}

\begin{enumerate}
\item Message should be forwarded to \emph{all} peers.
\item If \emph{none} of the peers can successfully be forwarded to, the node should keep the message an retry later.
\end{enumerate}

\subsubsection{Message digest} \label{sec:message-digest}

In order to identify messages that have already been seen, a message digest is computed on the message by every relaying node. 

The digest is the \emph{KECCAK256 hash} of the \texttt{RLP} serialization of the \texttt{To} and \texttt{Payload} fields of the \texttt{pss} message.

For example, the \texttt{RLP} serialized data for calculating the of the message in \ref{pss-message-example} would be:

\begin{lstlisting}[numbers=none]
00000000  d0 82 ab cd cc 80 80 84  00 00 02 6e 83 66 6f 6f  |...........n.foo|
00000010  80                                                |.|
00000011
\end{lstlisting}

The resulting digest:

\begin{lstlisting}[numbers=none]
00000000  7e 42 00 03 02 db be 05  ec 83 12 3c 4d 59 ea 4a  |~B.........<MY.J|
00000010  92 ff 01 44 60 38 64 dd  6f 06 b8 67 9d 81 72 98  |...D`8d.o..g..r.|
00000020
\end{lstlisting}
